{
    "title": "var, let, and const in JavaScript",
    "sections": [
      {
        "heading": "ðŸ”¹ Introduction",
        "type": "paragraph",
        "content": [
          "In JavaScript, variables can be declared using <strong>var</strong>, <strong>let</strong>, and <strong>const</strong>. Each has different scoping rules and use cases."

        ]
      },
      {
        "heading": "ðŸ”¹ var",
        "type": "paragraph",
        "content": [
          "The <strong>var</strong> keyword is function-scoped and was the traditional way to declare variables before ES6.",
          "<strong>Example:</strong>",
          "<code>var name = 'John';</code>"
        ]
      },
      {
        "heading": "ðŸ”¹ let",
        "type": "paragraph",
        "content": [
          "The <strong>let</strong> keyword allows you to declare block-scoped variables. It's preferable over <strong>var</strong> for most use cases.",
          "<strong>Example:</strong>",
          "<code>let age = 25;</code>"
        ]
      },
      {
        "heading": "ðŸ”¹ const",
        "type": "paragraph",
        "content": [
          "The <strong>const</strong> keyword is also block-scoped and is used to declare constants. Once assigned, the value cannot be changed.",
          "<strong>Example:</strong>",
          "<code>const PI = 3.14159;</code>"
        ]
      },
      {
        "heading": "ðŸ”¹ Summary",
        "type": "list",
        "description": "Hereâ€™s a quick summary of the differences between var, let, and const:",
        "content": [
          "<strong>Scope:</strong> <code>var</code> is function-scoped, <code>let</code> and <code>const</code> are block-scoped.",
          "<strong>Reassignment:</strong> <code>var</code> and <code>let</code> can be reassigned, <code>const</code> cannot.",
          "<strong>Hoisting:</strong> <code>var</code> is hoisted and initialized with <code>undefined</code>, <code>let</code> and <code>const</code> are hoisted but not initialized."
        ]
      }
    ]
  }
  